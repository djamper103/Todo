{"version":3,"sources":["Components/Todo.jsx","Components/TodoForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDo","state","removeTask","className","task","onClick","id","ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","document","body","classList","toggle","App","setstate","filter","length","TodoForm","newItem","Math","random","toString","substr","map","Todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uNAgBeA,MAdf,YAAsC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACnB,OACI,sBAAoBC,UAAU,iBAA9B,UACI,8BACKF,EAAMG,OAEX,qBAAKD,UAAU,cAAcE,QAAS,kBAAMH,EAAWD,EAAMK,KAA7D,iBAJML,EAAMK,K,QCuCTC,MAxCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACOC,mBAAS,IADhB,mBACpBC,EADoB,KACTC,EADS,KAOrBC,EAAe,SAACC,GAClBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KAcjB,OACI,uBAAMI,SAAUH,EAAhB,UACI,uBACII,MAAON,EACPO,KAAK,OACLC,SA1BS,SAACL,GAClBF,EAAaE,EAAEM,cAAcH,QA0BrBI,UAjBW,SAACP,GACP,UAAVA,EAAEQ,KACDT,EAAaC,IAgBTS,YAAY,yFAEhB,4FACA,wBAASjB,QAhBF,WACXkB,SAASC,KAAKC,UAAUC,OAAO,eAe3B,SAA4B,cAAC,IAAD,UCSzBC,MAtCf,WAAgB,IAAD,EAEclB,mBAAS,IAFvB,mBAENR,EAFM,KAEC2B,EAFD,KAcT1B,EAAa,SAACI,GAClBsB,EAAS,YAAI3B,EAAM4B,QAAO,SAAC5B,GAAD,OAAWA,EAAMK,KAAOA,QAGlD,OACE,sBAAKH,UAAU,WAAf,UACI,uGAAmBF,EAAM6B,OAAzB,OACF,sBAAK3B,UAAU,OAAf,UACA,cAAC4B,EAAD,CAAUvB,QAlBF,SAACE,GACb,GAAGA,EAAW,CACZ,IAAIsB,EAAQ,CACV1B,GAAI2B,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAE,IACxChC,KAAKM,GAEPkB,EAAS,GAAD,mBAAK3B,GAAL,CAAW+B,SAahB/B,EAAMoC,KAAI,SAACpC,GACR,OACE,cAACqC,EAAD,CACArC,MAAOA,EACPC,WAAYA,GACPD,EAAMK,cCxBRiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.553445c8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ToDo({ state, removeTask }) {\r\n    return (\r\n        <div key={state.id} className=\"todo-container\" >\r\n            <div >\r\n                {state.task}\r\n            </div>\r\n            <div className=\"item-delete\" onClick={() => removeTask(state.id)}>\r\n                X\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo","import { useState } from 'react'\r\nimport {FaSun} from \"react-icons/all\";\r\n\r\nfunction ToDoForm({ addTask }) {\r\n    const [userInput, setUserInput] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addTask(userInput)\r\n        setUserInput(\"\")\r\n    }\r\n\r\n    const handleKeyPress = (e) => {\r\n        if(e.key === \"Enter\") {\r\n            handleSubmit(e)\r\n        }\r\n    }\r\n    let darkmode = () => {\r\n        document.body.classList.toggle('dark-theme')\r\n\r\n    }\r\n    \r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                value={userInput}\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n                onKeyDown={handleKeyPress}\r\n                placeholder=\"Введите задачу.....\"\r\n            />        \r\n            <button>Сохранить</button>\r\n            <button  onClick={darkmode}><FaSun/></button>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import React,{useState} from 'react';\nimport './App.css';\nimport Todo from './Components/Todo'\nimport TodoForm from './Components/TodoForm'\n\n\n\n\nfunction App() {\n\n  const [state, setstate] =  useState([])\n\nconst addTask=(userInput)=>{\n  if(userInput) {\n    let newItem={\n      id: Math.random().toString(36).substr(1,10),\n      task:userInput,\n    }\n    setstate([...state,newItem])\n  }\n\n}\nconst removeTask = (id) => {\n  setstate([...state.filter((state) => state.id !== id)])\n}\n\n  return (\n    <div className='todo-app'>\n        <h3>Список задач: {state.length} </h3>\n      <div className='todo'>\n      <TodoForm addTask={addTask}/>\n      {state.map((state)=>{\n          return(\n            <Todo\n            state={state}\n            removeTask={removeTask}\n            key={state.id}\n            />\n          )\n      })}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}